rolls
#  First, we can look up the probabilities of rolling the values in Var1.
# We’ll do this with the lookup table that follows:
prob <- c("1" = 1/8, "2" = 1/8, "3" = 1/8, "4" = 1/8, "5" = 1/8, "6" = 3/8)
prob
# If you subset this table by rolls$Var1, you will get a vector of probabilities
# perfectly keyed to the values of Var1:
rolls$Var1
prob[rolls$Var1]
rolls$prob1 <- prob[rolls$Var1]
rolls
# Second, we can look up the probabilities of rolling the values in Var2
rolls$prob2 <- prob[rolls$Var2]
rolls
# Third, we can calculate the probability of rolling each combination by
# multiplying prob1 by prob2
rolls$prob <- rolls$prob1 * rolls$prob2
rolls
# It is easy to calculate the expected value now that we have each outcome, the
# value of each outcome, and the probability of each outcome. The expected value
# will be the summation of the dice values multiplied by the dice probabilities:
sum(rolls$value * rolls$prob)
# Now that you’ve warmed up, let’s use our method to calculate the expected
# value of the slot machine prize. We will follow the same steps we just took:
#  Exercise 11.1 (List the Combinations)
# Use expand.grid to make a data frame that contains every possible combination
# of three symbols from the wheel vector:
wheel <- c("DD", "7", "BBB", "BB", "B", "C", "0")
# Be sure to add the argument stringsAsFactors = FALSE to your expand.grid call;
# otherwise, expand.grid will save the combinations as factors, an unfortunate
# choice that will disrupt the score function.
combos <- expand.grid(wheel, wheel, wheel, stringsAsFactors = FALSE)
combos
# Now, let’s calculate the probability of getting each combination. You can use
# the probabilities contained in the prob argument of get_symbols to do this.
# Exercise 11.2 (Make a Lookup Table)
# Isolate the previous probabilities in a lookup table. What names will you use
# in your table?
wheel <- c("DD", "7", "BBB", "BB", "B", "C", "0")
prob <-
c(
"DD" = 0.03,
"7" = 0.03,
"BBB" = 0.06,
"BB" = 0.1,
"B" = 0.25,
"C" = 0.01,
"0" = 0.52
)
# Now let’s look up our probabilities.
# Exercise 11.3 (Lookup the Probabilities)
# Look up the probabilities of getting the values in Var1. Then add them to
# combos as a column named prob1. Then do the same for Var2 (prob2) and
# Var3 (prob3).
combos$prob1 <- prob[combos$Var1]
combos$prob2 <- prob[combos$Var2]
combos$prob3 <- prob[combos$Var3]
combos
# Exercise 11.4 (Calculate Probabilities for Each Combination) Calculate the
# overall probabilities for each combination. Save them as a column named prob
# in combos, then check your work.
combos$prob <- combos$prob1 * combos$prob2 * combos$prob3
combos
sum(combos$prob)
# For example, we can calculate the prize for the first row of combos like this:
symbols <- c(combos[1, 1], combos[1, 2], combos[1, 3])
## "DD" "DD" "DD"
score(symbols)
## 800
# However there are 343 rows, which makes for tedious work if you plan to
# calculate the scores manually. It will be quicker to automate this task and
# have R do it for you, which you can do with a for loop.
# 11.3 for Loops
# R will run your loop in whichever environment you call it from. This is bad
# news if your loop uses object names that already exist in the environment.
# Your loop will overwrite the existing objects with the objects that it creates.
# This applies to the value symbol as well.
# For loops run on sets
# In many programming languages, for loops are designed to work with integers,
# not sets. You give the loop a starting value and an ending value, as well as
# an increment to advance the value by between loops. The for loop then runs
# until the loop value exceeds the ending value.
# You can recreate this effect in R by having a for loop execute on a set of
# integers, but don’t lose track of the fact that R’s for loops execute on
# members of a set, not sequences of integers.
# R’s for loops have a shortcoming that you’ll want to know about before you
# start using them: for loops do not return output.
# for loops are like Las Vegas: what happens in a for loop stays in a for loop.
# If you want to use the products of a for loop, you must write the for loop so
# that it saves its own output as it goes.
# To save output from a for loop, you must write the loop so that it saves its
# own output as it runs. You can do this by creating an empty vector or list
# before you run the for loop. Then use the for loop to fill up the vector or
# list. When the for loop is finished, you’ll be able to access the vector or
# list, which will now have all of your results.
# Let’s see this in action. The following code creates an empty vector of
# length 4:
(chars <- vector(mode = "character", length = 4))
# Then next loop will fill it with strings:
words <- c("My", "fourth", "for", "loop")
for (i in seq_along(words)) {
chars[i] <- words[i]
}
chars
# Let’s use a for loop to calculate the prize for each row in combos. To begin,
# create a new column in combos to store the results of the for loop:
combos$prize <- NA
combos
# Exercise 11.5 (Build a Loop)
# Construct a for loop that will run score on all 343 rows of combos. The loop
# should run score on the first three entries of the _i_th row of combos and
# should store the results in the _i_th entry of combos$prize.
for (i in seq_along(1:nrow(combos))) {
combos$prize[i] <-
score(c(combos[i, 1], combos[i, 2], combos[i, 3]))
}
combos
# We’re now ready to calculate the expected value of the prize. The expected
# value is the sum of combos$prize weighted by combos$prob. This is also the
# payout rate of the slot machine:
sum(combos$prize * combos$prob)
# Uh oh. The expected prize is about 0.54, which means our slot machine only
# pays 54 cents on the dollar over the long run. Does this mean that the
# manufacturer of the Manitoba slot machines was lying?
# No, because we ignored an important feature of the slot machine when we wrote
# score: a diamond is wild. You can treat a DD as any other symbol if it
# increases your prize, with one exception. You cannot make a DD a C unless you
# already have another C in your symbols (it’d be too easy if every DD
# automatically earned you $2).
# The best thing about DDs is that their effects are cumulative. For example,
# consider the combination B, DD, B. Not only does the DD count as a B, which
# would earn a prize of $10; the DD also doubles the prize to $20.
# Adding this behavior to our code is a little tougher than what we have done so
# far, but it involves all of the same principles. You can decide that your slot
# machine doesn’t use wilds and keep the code that we have. In that case, your
# slot machine will have a payout rate of about 54 percent. Or, you could
# rewrite your code to use wilds. If you do, you will find that your slot
# machine has a payout rate of 93 percent, one percent higher than the
# manufacturer’s claim. You can calculate this rate with the same method that
# we used in this section.
# Exercise 11.6 (Challenge)
# There are many ways to modify score that would count DDs as wild. If you would
# like to test your skill as an R programmer, try to write your own version of
# score that correctly handles diamonds.
# If you would like a more modest challenge, study the following score code.
# It accounts for wild diamonds in a way that I find elegant and succinct.
# See if you can understand each step in the code and how it achieves its result.
score <- function(symbols) {
diamonds <- sum(symbols == "DD")
cherries <- sum(symbols == "C")
# identify case
# since diamonds are wild, only nondiamonds
# matter for three of a kind and all bars
slots <- symbols[symbols != "DD"]
same <- length(unique(slots)) == 1
bars <- slots %in% c("B", "BB", "BBB")
# assign prize
if (diamonds == 3) {
prize <- 100
} else if (same) {
payouts <- c("7" = 80, "BBB" = 40, "BB" = 25,
"B" = 10, "C" = 10, "0" = 0)
prize <- unname(payouts[slots[1]])
} else if (all(bars)) {
prize <- 5
} else if (cherries > 0) {
# diamonds count as cherries
# so long as there is one real cherry
prize <- c(0, 2, 5)[cherries + diamonds + 1]
} else {
prize <- 0
}
# double for each diamond
prize * 2^diamonds
}
# Exercise 11.7 (Calculate the Expected Value)
# Calculate the expected value of the slot machine when it uses the new score
# function. You can use the existing combos data frame, but you will need to
# build a for loop to recalculate combos$prize
for (i in seq_along(1:nrow(combos))) {
combos$prize[i] <-
score(c(combos[i, 1], combos[i, 2], combos[i, 3]))
}
combos
sum(combos$prize * combos$prob)
# 11.4 while Loops
# You can use while loops to do things that take a varying number of iterations,
# like calculating how long it takes to go broke playing slots (as follows).
# However, in practice, while loops are much less common than for loops in R:
plays_till_broke <- function(start_with) {
cash <- start_with
n <- 0
while (cash > 0) {
cash <- cash - 1 + play()
n <- n + 1
}
n
}
plays_till_broke(100)
# 11.5 repeat Loops
# repeat loops are even more basic than while loops. They will repeat a chunk of
# code until you tell them to stop (by hitting Escape) or until they encounter
# the command break, which will stop the loop.
# You can use a repeat loop to recreate plays_till_broke, my function that
# simulates how long it takes to lose money while playing slots:
plays_till_broke <- function(start_with) {
cash <- start_with
n <- 0
repeat {
cash <- cash - 1 + play()
n <- n + 1
if (cash <= 0) {
break
}
}
n
}
plays_till_broke(100)
# 12.1 Vectorized Code
# The fastest R code will usually take advantage of three things:
# 1. logical tests
# 2. subsetting
# 3. element-wise execution.
# These are the things that R does best. Code that uses these things usually
# has a certain quality: it is vectorized; the code can take a vector of values
# as input and manipulate each value in the vector at the same time.
# To see what vectorized code looks like, compare these two examples of an
# absolute value function.
# The first example is not vectorized; abs_loop uses a for loop to manipulate
# each element of the vector one at a time:
abs_loop <- function(vec) {
for (i in 1:length(vec)) {
if (vec[i] < 0) {
vec[i] <- -vec[i]
}
}
vec
}
# The second example, abs_set, is a vectorized version of abs_loop. It uses
# logical subsetting to manipulate every negative number in the vector at the
# same time:
abs_sets <- function(vec) {
vec[vec < 0] <- vec[vec < 0] * -1
vec
}
# abs_set is much faster than abs_loop because it relies on operations that
# R does quickly: logical tests, subsetting, and element-wise execution.
# To compare abs_loop and abs_set, first make a long vector of positive and
# negative numbers. long will contain 50 million values:
long <- rep(c(1, -1), 50000000)
# You can then use system.time to measure how much time it takes each function
# to evaluate long:
system.time(abs_loop(long))
system.time(abs_sets(long))
#  Exercise 12.1 (How fast is abs?)
# Many preexisting R functions are already
# vectorized and have been optimized to perform quickly. You can make your code
# faster by relying on these functions whenever possible. For example, R comes
# with a built-in absolute value function, abs.
# Check to see how much faster abs computes the absolute value of long than
# abs_loop and abs_set do.
system.time(abs_loop(long))
system.time(abs_sets(long))
system.time(abs(long))
# 12.2 How to Write Vectorized Code
# Exercise 12.2 (Vectorize a Function)
# The following function converts a vector of slot symbols to a vector of new
# slot symbols. Can you vectorize it? How much faster does the vectorized
# version work?
change_symbols <- function(vec) {
for (i in 1:length(vec)) {
if (vec[i] == "DD") {
vec[i] <- "joker"
} else if (vec[i] == "C") {
vec[i] <- "ace"
} else if (vec[i] == "7") {
vec[i] <- "king"
} else if (vec[i] == "B") {
vec[i] <- "queen"
} else if (vec[i] == "BB") {
vec[i] <- "jack"
} else if (vec[i] == "BBB") {
vec[i] <- "ten"
} else {
vec[i] <- "nine"
}
}
vec
}
vec <- c("DD", "C", "7", "B", "BB", "BBB", "0")
change_symbols(vec)
many <- rep(vec, 1000000)
system.time(change_symbols(many))
# My solution is using a lookup-table
change_symbols_vectorized <- function(vec)
{
change <- c("DD" = "joker",
"C" = "ace",
"7" = "king",
"B" = "queen",
"BB" = "jack",
"BBB" = "ten",
"0" = "nine")
unname(change[vec])
}
change_symbols(vec)
change_symbols_vectorized(vec)
system.time(change_symbols(many))
system.time(change_symbols_vectorized(many))
# Lookup-table is >55x faster!
# Vectorized function from the book
change_vec <- function (vec)
{
vec[vec == "DD"] <- "joker"
vec[vec == "C"] <- "ace"
vec[vec == "7"] <- "king"
vec[vec == "B"] <- "queen"
vec[vec == "BB"] <- "jack"
vec[vec == "BBB"] <- "ten"
vec[vec == "0"] <- "nine"
vec
}
system.time(change_symbols_vectorized(many))
system.time(change_vec(many))
# Lookup table is 2x as fast!
# if and for
# A good way to spot for loops that could be vectorized is to look for
# combinations of if and for. if can only be applied to one value at a time,
# which means it is often used in conjunction with a for loop. The for loop
# helps apply if to an entire vector of values. This combination can usually
# be replaced with logical subsetting, which will do the same thing but run
# much faster.
# 12.3 How to Write Fast for Loops in R
# You can dramatically increase the speed of your for loops by doing two things
# to optimize each loop.
# First, do as much as you can outside of the for loop.
# Every line of code that you place inside of the for loop will be run many,
# many times. If a line of code only needs to be run once, place it outside of
# the loop to avoid repetition.
# Second, make sure that any storage objects that you use with the loop are
# large enough to contain all of the results of the loop.
# For example, both loops below will need to store one million values.
# The first loop stores its values in an object named output that begins with
# a length of one million:
system.time({
output <- rep(NA, 1000000)
for (i in 1:1000000) {
output[i] <- i + 1
}
})
# The second loop stores its values in an object named output that begins with
# a length of one. R will expand the object to a length of one million as it
# runs the loop. The code in this loop is very similar to the code in the first
# loop, but the loop takes longer to run than the first loop:
system.time({
output <- NA
for (i in 1:1000000) {
output[i] <- i + 1
}
})
# The two loops do the same thing, so what accounts for the difference? In the
# second loop, R has to increase the length of output by one for each run of
# the loop. To do this, R needs to find a new place in your computer’s memory
# that can contain the larger object. R must then copy the output vector over
# and erase the old version of output before moving on to the next run of the
# loop. By the end of the loop, R has rewritten output in your computer’s memory
# one million times.
# In the first case, the size of output never changes; R can define one output
# object in memory and use it for each run of the for loop.
# The authors of R use low-level languages like C and Fortran to write basic
# R functions, many of which use for loops. These functions are compiled and
# optimized before they become a part of R, which makes them quite fast.
# Whenever you see .Primitive, .Internal, or .Call written in a function’s
# definition, you can be confident the function is calling code from another
# language. You’ll get all of the speed advantages of that language by using
# the function.
winnings <- vector(mode = "numeric", length = 1000000)
# 12.4 Vectorized Code in Practice
# To see how vectorized code can help you as a data scientist, consider our
# slot machine project. In Loops, you calculated the exact payout rate for your
# slot machine, but you could have estimated this payout rate with a simulation.
# If you played the slot machine many, many times, the average prize over all of
# the plays would be a good estimate of the true payout rate.
# This method of estimation is based on the law of large numbers and is similar
# to many statistical simulations. To run this simulation, you could use a for
# loop:
winnings <- vector(mode = "numeric", length = 1000000)
for (i in seq_along(winnings)) {
winnings[i] <- play()
}
head(winnings)
class(play())
play()
test <- play()
class(test)
typeof(test)
vector(mode = "double", length = 100)
vector(mode = "numeric", length = 100)
head(winnings)
mean(winnings)
# If you run this simulation, you will notice that it takes a while to run.
winnings <- vector(mode = "double", length = 1000000)
system.time(for (i in seq_along(winnings)) {
winnings[i] <- play()
})
View(play)
View(get_symbols)
View(score)
View(get_symbols)
# For example, you could rewrite get_symbols to generate n slot combinations
# and return them as an n x 3 matrix, like the one that follows. Each row of
# the matrix will contain one slot combination to be scored:
get_many_symbols <- function(n) {
wheel <- c("DD", "7", "BBB", "BB", "B", "C", "0")
vec <- sample(
wheel,
size = 3 * n,
replace = TRUE,
prob = c(0.03, 0.03, 0.06, 0.1, 0.25, 0.01, 0.52)
)
matrix(vec, ncol = 3)
}
get_many_symbols(5)
# You could also rewrite play to take a parameter, n, and return n prizes, in
# a data frame:
play_many <- function(n) {
symb_mat <- get_many_symbols(n = n)
data.frame(
w1 = symb_mat[, 1],
w2 = symb_mat[, 2],
w3 = symb_mat[, 3],
prize = score_many(symb_mat)
)
}
View(score)
play()
symbols <- matrix(
c("DD", "DD", "DD",
"C", "DD", "0",
"B", "B", "B",
"B", "BB", "BBB",
"C", "C", "0",
"7", "DD", "DD"), nrow = 6, byrow = TRUE)
# symbols should be a matrix with a column for each slot machine window
score_many <- function(symbols) {
# Step 1: Assign base prize based on cherries and diamonds ---------
## Count the number of cherries and diamonds in each combination
cherries <- rowSums(symbols == "C")
diamonds <- rowSums(symbols == "DD")
## Wild diamonds count as cherries
prize <- c(0, 2, 5)[cherries + diamonds + 1]
## ...but not if there are zero real cherries
### (cherries is coerced to FALSE where cherries == 0)
prize[!cherries] <- 0
# Step 2: Change prize for combinations that contain three of a kind
same <- symbols[, 1] == symbols[, 2] &
symbols[, 2] == symbols[, 3]
payoffs <- c("DD" = 100, "7" = 80, "BBB" = 40,
"BB" = 25, "B" = 10, "C" = 10, "0" = 0)
prize[same] <- payoffs[symbols[same, 1]]
# Step 3: Change prize for combinations that contain all bars ------
bars <- symbols == "B" | symbols ==  "BB" | symbols == "BBB"
all_bars <- bars[, 1] & bars[, 2] & bars[, 3] & !same
prize[all_bars] <- 5
# Step 4: Handle wilds ---------------------------------------------
## combos with two diamonds
two_wilds <- diamonds == 2
### Identify the nonwild symbol
one <- two_wilds & symbols[, 1] != symbols[, 2] &
symbols[, 2] == symbols[, 3]
two <- two_wilds & symbols[, 1] != symbols[, 2] &
symbols[, 1] == symbols[, 3]
three <- two_wilds & symbols[, 1] == symbols[, 2] &
symbols[, 2] != symbols[, 3]
### Treat as three of a kind
prize[one] <- payoffs[symbols[one, 1]]
prize[two] <- payoffs[symbols[two, 2]]
prize[three] <- payoffs[symbols[three, 3]]
## combos with one wild
one_wild <- diamonds == 1
### Treat as all bars (if appropriate)
wild_bars <- one_wild & (rowSums(bars) == 2)
prize[wild_bars] <- 5
### Treat as three of a kind (if appropriate)
one <- one_wild & symbols[, 1] == symbols[, 2]
two <- one_wild & symbols[, 2] == symbols[, 3]
three <- one_wild & symbols[, 3] == symbols[, 1]
prize[one] <- payoffs[symbols[one, 1]]
prize[two] <- payoffs[symbols[two, 2]]
prize[three] <- payoffs[symbols[three, 3]]
# Step 5: Double prize for every diamond in combo ------------------
unname(prize * 2^diamonds)
}
system.time(play_many(1000000))
View(play_many)
# Create knitting function
knit_notebook <- function(file) {
ezknitr::ezknit(
here::here(file),
wd = here::here(),
out_dir = here::here("Notebooks"),
verbose = TRUE,
keep_md = TRUE,
keep_html = FALSE
)
}
# Style all Notebooks
styler::style_dir(here::here())
# Knit all Notebooks
fs::dir_ls() |>
stringr::str_subset(".Rmd$") |>
purrr::walk(knit_notebook)
